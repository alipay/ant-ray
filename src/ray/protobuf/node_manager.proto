syntax = "proto3";

package ray.rpc;

import "src/ray/protobuf/common.proto";

message ForwardTaskRequest {
  // The ID of the task to be forwarded.
  bytes task_id = 1;
  // The tasks in the uncommitted lineage of the forwarded task. This
  // should include task_id.
  repeated Task uncommitted_tasks = 2;
}

message ForwardTaskReply {
}

// Service for inter-node-manager communication.
service NodeManagerService {
  // Forward a task and its uncommitted lineage to the remote node manager.
  rpc ForwardTask(ForwardTaskRequest) returns (ForwardTaskReply);
}

// This enum is needed by asio based rpc. For each method in the rpc service,
// a message type needs to be defined for the corresponding request in that
// method, so that receiver side can figure out the exact request message
// based on this type, deserialize it accordingly, and invoke the corresponding
// method.
enum NodeManagerServiceMessageType {
  // `ConnectClient` and `DisconnectClient` MUST be defined and their values
  // MUST be consistent with the ones in `ServiceMessageType` in
  // "src/ray/protobuf/asio.proto".
  NodeManagerConnectClient = 0;
  NodeManagerDisconnectClient = 1;
  // Forward task request.
  ForwardTaskRequestMessage = 2;
  // Forward task reply.
  ForwardTaskReplyMessage = 3;
}