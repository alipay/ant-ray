syntax = "proto3";

package ray.rpc;

import "src/ray/protobuf/common.proto";

message ReturnObject {
  // Object ID.
  bytes object_id = 1;
  // Data of the object.
  bytes data = 2;
  // Metaata of the object.
  bytes metadata = 3;
}

message PushTaskRequest {
  // The task to be pushed.
  TaskSpec task_spec = 1;
}

message PushTaskReply {
  // The returned objects.
  repeated ReturnObject return_objects = 1;
}

// Service for direct actor.
service DirectActorService {
  // Push a task to a worker.
  rpc PushTask(PushTaskRequest) returns (PushTaskReply);
}

// This enum is needed by asio based rpc. For each method in the rpc service,
// a message type needs to be defined for the corresponding request in that
// method, so that receiver side can figure out the exact request message
// based on this type, deserialize it accordingly, and invoke the corresponding
// method.
enum DirectActorServiceMessageType {
  // `ConnectClient` and `DisconnectClient` MUST be defined and their values
  // MUST be consistent with the ones in `ServiceMessageType` in
  // "src/ray/protobuf/asio.proto".
  DirectActorConnectClient = 0;
  DirectActorDisconnectClient = 1;
  // Push task request.
  PushTaskRequestMessage = 2;
  // Push task reply.
  PushTaskReplyMessage = 3;
}
