syntax = "proto3";
option cc_enable_arenas = true;

package ray.rpc;

option java_package = "io.ray.runtime.generated";

message Event {
  enum SourceType {
    // The COMMON type is designed for some process that does not init there own
    // source_type.
    // We suppose that there will be some roles in addition to GCS, RAYLET, CORE_WORKER.
    COMMON = 0;
    CORE_WORKER = 1;
    GCS = 2;
    RAYLET = 3;
    EXTERNAL = 4;
  }

  enum Severity {
    INFO = 0;
    WARNING = 1;
    ERROR = 2;
    FATAL = 3;
  }

  // event_id is the unique ID of this event
  string event_id = 1;
  // source type is the type of the source
  SourceType source_type = 2;
  // source_hostname is the hostname of the source
  string source_hostname = 3;
  // source_pid is the process pid of the source
  int32 source_pid = 4;
  // severity is the event severity level
  Severity severity = 5;
  // label describes some important information about this event, always use for the
  // searching index and tag
  string label = 6;
  // message is main information of this event
  string message = 7;
  // timestamp is the report in seconds since 00:00, Jan 1 1970 UTC
  int64 timestamp = 8;
  // store custom key such as node_id, job_id, task_id
  map<string, string> custom_fields = 9;
}

message ReportEventsReply {
  bool send_sucess = 1;
}

message ReportEventsRequest {
  repeated Event event_objects = 1;
  repeated string event_strings = 2;
}

service ReportEventService {
  rpc ReportEvents(ReportEventsRequest) returns (ReportEventsReply);
}

message SyncEventsRequest {
  string report_address = 2;
}

message SyncEventsReply {
}

message CheckJavaHsErrLogRequest {
  string log_path = 1;
  string job_id = 2;
  string job_name = 3;
  string worker_id = 4;
  string actor_id = 5;
  int32 pid = 6;
  string ip = 7;
  bool is_driver = 8;
}

message CheckJavaHsErrLogReply {
}

service EventService {
  rpc SyncEvents(SyncEventsRequest) returns (SyncEventsReply);
  rpc CheckJavaHsErrLog(CheckJavaHsErrLogRequest) returns (CheckJavaHsErrLogReply);
}
