// Copyright 2017 The Ray Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ray.rpc;

option java_package = "org.ray.runtime.generated";

// Language of a task or worker.
enum Language {
  PYTHON = 0;
  JAVA = 1;
  CPP = 2;
}

// Type of a worker.
enum WorkerType {
  WORKER = 0;
  DRIVER = 1;
}

// Type of a task.
enum TaskType {
  // Normal task.
  NORMAL_TASK = 0;
  // Actor creation task.
  ACTOR_CREATION_TASK = 1;
  // Actor task.
  ACTOR_TASK = 2;
  // Driver task.
  DRIVER_TASK = 3;
}

// Address of a worker or node manager.
message Address {
  bytes raylet_id = 1;
  string ip_address = 2;
  int32 port = 3;
  // Optional unique id for the worker.
  bytes worker_id = 4;
}


/// The following function descriptors is duplicate with flatbuf definitions.
///
/// Function descriptor for Java.
message JavaFunctionDescriptor {
  string class_name = 1;
  string function_name = 2;
  string signature = 3;
}

/// Function descriptor for Python.
message PythonFunctionDescriptor {
  string module_name = 1;
  string class_name = 2;
  string function_name = 3;
  string function_hash = 4;
}

/// Function descriptor for C/C++.
message CppFunctionDescriptor {
  /// Dynamic library name which contains the remote function.
  string lib_name = 1;
  /// Remote function offset from base address.
  string function_offset = 2;
  /// Executable function offset from base address.
  string exec_function_offset = 3;
}

// A union wrapper for various function descriptor types.
message FunctionDescriptor {
  oneof function_descriptor {
    JavaFunctionDescriptor java_function_descriptor = 1;
    PythonFunctionDescriptor python_function_descriptor = 2;
    CppFunctionDescriptor cpp_function_descriptor = 3;
  }
}

// The task execution specification encapsulates all mutable information about
// the task. These fields may change at execution time, converse to the
// `TaskSpec` is determined at submission time.
message TaskExecutionSpec {
  // The last time this task was received for scheduling.
  double last_timestamp = 2;
  // The number of times this task was spilled back by raylets.
  uint64 num_forwards = 3;
}

// Represents a task, including task spec, and task execution spec.
message Task {
  // Note(qwang): The task_spec is represented in flatbuf.
  bytes task_spec = 1;
  TaskExecutionSpec task_execution_spec = 2;
}

// Represents a resource id.
message ResourceId {
  // The index of the resource (i.e., CPU #3).
  int64 index = 1;
  // The quantity of the resource assigned (i.e., 0.5 CPU).
  double quantity = 2;
}

// Represents a set of resource ids.
message ResourceMapEntry {
  // The name of the resource (i.e., "CPU").
  string name = 1;
  // The set of resource ids assigned.
  repeated ResourceId resource_ids = 2;
}

message ViewData {
  message Measure {
    // A short string that describes the tags for this mesaure, e.g.,
    // "Tag1:Value1,Tag2:Value2,Tag3:Value3"
    string tags = 1;
    // Int64 type value (if present).
    int64 int_value = 2;
    // Double type value (if present).
    double double_value = 3;
    // Distribution type value (if present).
    double distribution_min = 4;
    double distribution_mean = 5;
    double distribution_max = 6;
    double distribution_count = 7;
    repeated double distribution_bucket_boundaries = 8;
    repeated double distribution_bucket_counts = 9;
  }

  // The name of this Census view.
  string view_name = 1;
  // The list of measures recorded under this view.
  repeated Measure measures = 2;
}

// Debug info for a referenced object.
message ObjectRefInfo {
  // Object id that is referenced.
  bytes object_id = 1;
  // Language call site of the object reference (i.e., file and line number).
  string call_site = 2;
  // Size of the object if this core worker is the owner, otherwise -1.
  int64 object_size = 3;
  // Number of local references to the object.
  int64 local_ref_count = 4;
  // Number of references in submitted tasks.
  int64 submitted_task_ref_count = 5;
  // Object ids that contain this object.
  repeated bytes contained_in_owned = 6;
  // True if this object is pinned in memory by the current process.
  bool pinned_in_memory = 7;
}

// Debug info returned from the core worker.
message CoreWorkerStats {
  // Debug string of the currently executing task.
  string current_task_desc = 1;
  // Number of pending normal and actor tasks.
  int32 num_pending_tasks = 2;
  // Number of object ids in local scope.
  int32 num_object_ids_in_scope = 3;
  // String representation of the function descriptor of the currently executing task.
  string current_task_func_desc = 4;
  // IP address of the core worker.
  string ip_address = 6;
  // Port of the core worker.
  int64 port = 7;
  // Actor ID.
  bytes actor_id = 8;
  // A map from the resource name (e.g. "CPU") to the amount of resource used.
  map<string, double> used_resources = 9;
  // A string displayed on Dashboard.
  map<string, string> webui_display = 10;
  // Number of objects stored in local memory.
  int32 num_local_objects = 11;
  // Used local object store memory.
  int64 used_object_store_memory = 12;
  // Length of the task queue.
  int32 task_queue_length = 13;
  // Number of executed tasks.
  int32 num_executed_tasks = 14;
  // Actor constructor.
  string actor_title = 15;
  // Local reference table.
  repeated ObjectRefInfo object_refs = 16;
}
