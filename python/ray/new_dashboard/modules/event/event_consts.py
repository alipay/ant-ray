from ray.ray_constants import env_integer
from ray.core.generated import event_pb2
import logging

PER_JOB_EVENTS_COUNT_LIMIT = env_integer("PER_JOB_EVENTS_COUNT_LIMIT", 500)

PER_JOB_WORKER_PIPELINES_COUNT_LIMIT = env_integer(
    "PER_JOB_WORKER_PIPELINES_COUNT_LIMIT", 10000)

PER_JOB_ACTOR_PIPELINES_COUNT_LIMIT = env_integer(
    "PER_JOB_ACTOR_PIPELINES_COUNT_LIMIT", 20000)

PER_ACTOR_PIPELINES_COUNT_LIMIT = env_integer(
    "PER_ACTOR_PIPELINES_COUNT_LIMIT", 5)

PER_WORKER_EVENTS_COUNT_LIMIT = env_integer("PER_WORKER_EVENTS_COUNT_LIMIT",
                                            10)

PER_ACTOR_EVENTS_COUNT_LIMIT = env_integer("PER_ACTOR_EVENTS_COUNT_LIMIT", 20)

# Event Head
EVENT_HEAD_CACHE_SIZE = env_integer("EVENT_HEAD_CACHE_SIZE", 10000)
EVENT_HEAD_UPDATE_INTERVAL_SECONDS = env_integer(
    "EVENT_HEAD_UPDATE_INTERVAL_SECONDS", 2)
# The maximum value of each update is 50 * 200
EVENT_HEAD_BATCH_CACHE_SIZE = env_integer("EVENT_HEAD_BATCH_CACHE_SIZE", 50)
EVENT_HEAD_BATCH_UPDATE_SIZE = env_integer("EVENT_HEAD_BATCH_UPDATE_SIZE", 500)

# Event Agent
# The maximum value of each report is 10 * 100
EVENT_AGENT_BATCH_CACHE_SIZE = env_integer("EVENT_AGENT_BATCH_CACHE_SIZE", 20)
EVENT_AGENT_BATCH_REPORT_SIZE = env_integer("EVENT_AGENT_BATCH_REPORT_SIZE",
                                            200)

# Monitor events
SCAN_EVENT_DIR_INTERVAL_SECONDS = env_integer(
    "SCAN_EVENT_DIR_INTERVAL_SECONDS", 5)
SCAN_EVENT_START_OFFSET_SECONDS = -30 * 60
CONCURRENT_READ_LIMIT = 50
READ_LINE_COUNT_LIMIT = 200
READ_LINE_LENGTH_LIMIT = 2 * 1024 * 1024  # 2MB
# Report events
EVENT_AGENT_REPORT_INTERVAL_SECONDS = 2
EVENT_AGENT_RETRY_INTERVAL_SECONDS = 5
EVENT_AGENT_CACHE_SIZE = 2000
# Event sources
EVENT_SOURCE_EXTERNAL = event_pb2.Event.SourceType.Name(
    event_pb2.Event.EXTERNAL)
EVENT_SOURCE_ALL = event_pb2.Event.SourceType.keys()
# External log
EXTERNAL_LOG_LEVEL = logging.INFO
# Display level
DEFAULT_EVENT_DISPLAY_LEVEL = "WARNING"
EVENT_DISPLAY_LEVEL_ENV_NAME = "RAY_EVENT_DISPLAY_LEVEL"
