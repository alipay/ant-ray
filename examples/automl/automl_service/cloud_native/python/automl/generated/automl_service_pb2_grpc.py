# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import automl.generated.automl_service_pb2 as automl__service__pb2


class AutoMLServiceStub(object):
    """Service from client to proxy
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DoAutoML = channel.unary_unary(
                '/AutoMLService/DoAutoML',
                request_serializer=automl__service__pb2.DoAutoMLRequest.SerializeToString,
                response_deserializer=automl__service__pb2.DoAutoMLReply.FromString,
                )
        self.GetResult = channel.unary_unary(
                '/AutoMLService/GetResult',
                request_serializer=automl__service__pb2.GetResultRequest.SerializeToString,
                response_deserializer=automl__service__pb2.GetResultReply.FromString,
                )


class AutoMLServiceServicer(object):
    """Service from client to proxy
    """

    def DoAutoML(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AutoMLServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DoAutoML': grpc.unary_unary_rpc_method_handler(
                    servicer.DoAutoML,
                    request_deserializer=automl__service__pb2.DoAutoMLRequest.FromString,
                    response_serializer=automl__service__pb2.DoAutoMLReply.SerializeToString,
            ),
            'GetResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetResult,
                    request_deserializer=automl__service__pb2.GetResultRequest.FromString,
                    response_serializer=automl__service__pb2.GetResultReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AutoMLService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AutoMLService(object):
    """Service from client to proxy
    """

    @staticmethod
    def DoAutoML(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AutoMLService/DoAutoML',
            automl__service__pb2.DoAutoMLRequest.SerializeToString,
            automl__service__pb2.DoAutoMLReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AutoMLService/GetResult',
            automl__service__pb2.GetResultRequest.SerializeToString,
            automl__service__pb2.GetResultReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TrainerRegisterServiceStub(object):
    """Service from trainer to proxy
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/TrainerRegisterService/Register',
                request_serializer=automl__service__pb2.RegisterRequest.SerializeToString,
                response_deserializer=automl__service__pb2.RegisterReply.FromString,
                )
        self.ReportResult = channel.unary_unary(
                '/TrainerRegisterService/ReportResult',
                request_serializer=automl__service__pb2.ReportResultRequest.SerializeToString,
                response_deserializer=automl__service__pb2.ReportResultReply.FromString,
                )


class TrainerRegisterServiceServicer(object):
    """Service from trainer to proxy
    """

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TrainerRegisterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=automl__service__pb2.RegisterRequest.FromString,
                    response_serializer=automl__service__pb2.RegisterReply.SerializeToString,
            ),
            'ReportResult': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportResult,
                    request_deserializer=automl__service__pb2.ReportResultRequest.FromString,
                    response_serializer=automl__service__pb2.ReportResultReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TrainerRegisterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TrainerRegisterService(object):
    """Service from trainer to proxy
    """

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TrainerRegisterService/Register',
            automl__service__pb2.RegisterRequest.SerializeToString,
            automl__service__pb2.RegisterReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReportResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TrainerRegisterService/ReportResult',
            automl__service__pb2.ReportResultRequest.SerializeToString,
            automl__service__pb2.ReportResultReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class WorkerRegisterServiceStub(object):
    """Service from worker to trainer
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.WorkerRegister = channel.unary_unary(
                '/WorkerRegisterService/WorkerRegister',
                request_serializer=automl__service__pb2.WorkerRegisterRequest.SerializeToString,
                response_deserializer=automl__service__pb2.WorkerRegisterReply.FromString,
                )
        self.WorkerReportResult = channel.unary_unary(
                '/WorkerRegisterService/WorkerReportResult',
                request_serializer=automl__service__pb2.WorkerReportResultRequest.SerializeToString,
                response_deserializer=automl__service__pb2.WorkerReportResultReply.FromString,
                )


class WorkerRegisterServiceServicer(object):
    """Service from worker to trainer
    """

    def WorkerRegister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WorkerReportResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkerRegisterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'WorkerRegister': grpc.unary_unary_rpc_method_handler(
                    servicer.WorkerRegister,
                    request_deserializer=automl__service__pb2.WorkerRegisterRequest.FromString,
                    response_serializer=automl__service__pb2.WorkerRegisterReply.SerializeToString,
            ),
            'WorkerReportResult': grpc.unary_unary_rpc_method_handler(
                    servicer.WorkerReportResult,
                    request_deserializer=automl__service__pb2.WorkerReportResultRequest.FromString,
                    response_serializer=automl__service__pb2.WorkerReportResultReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'WorkerRegisterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WorkerRegisterService(object):
    """Service from worker to trainer
    """

    @staticmethod
    def WorkerRegister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WorkerRegisterService/WorkerRegister',
            automl__service__pb2.WorkerRegisterRequest.SerializeToString,
            automl__service__pb2.WorkerRegisterReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WorkerReportResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WorkerRegisterService/WorkerReportResult',
            automl__service__pb2.WorkerReportResultRequest.SerializeToString,
            automl__service__pb2.WorkerReportResultReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
