// Code generated by cmd/cgo; DO NOT EDIT.

package ray

import "unsafe"

import _ "runtime/cgo"

import "syscall"

var _ syscall.Errno
func _Cgo_ptr(ptr unsafe.Pointer) unsafe.Pointer { return ptr }

//go:linkname _Cgo_always_false runtime.cgoAlwaysFalse
var _Cgo_always_false bool
//go:linkname _Cgo_use runtime.cgoUse
func _Cgo_use(interface{})
type _Ctype_GoInt = _Ctype_GoInt64

type _Ctype_GoInt64 = _Ctype_longlong

type _Ctype_GoSlice = _Ctype_struct___0

type _Ctype_char int8

type _Ctype_int int32

type _Ctype_intgo = _Ctype_ptrdiff_t

type _Ctype_long int64

type _Ctype_longlong int64

type _Ctype_ptrdiff_t = _Ctype_long

type _Ctype_struct___0 struct {
	data	unsafe.Pointer
	len	_Ctype_GoInt
	cap	_Ctype_GoInt
}

type _Ctype_void [0]byte

//go:linkname _cgo_runtime_cgocall runtime.cgocall
func _cgo_runtime_cgocall(unsafe.Pointer, uintptr) int32

//go:linkname _cgo_runtime_cgocallback runtime.cgocallback
func _cgo_runtime_cgocallback(unsafe.Pointer, unsafe.Pointer, uintptr, uintptr)

//go:linkname _cgoCheckPointer runtime.cgoCheckPointer
func _cgoCheckPointer(interface{}, interface{})

//go:linkname _cgoCheckResult runtime.cgoCheckResult
func _cgoCheckResult(interface{})


func _Cfunc_CBytes(b []byte) unsafe.Pointer {
	p := _cgo_cmalloc(uint64(len(b)))
	pp := (*[1<<30]byte)(p)
	copy(pp[:], b)
	return p
}

func _Cfunc_CString(s string) *_Ctype_char {
	p := _cgo_cmalloc(uint64(len(s)+1))
	pp := (*[1<<30]byte)(p)
	copy(pp[:], s)
	pp[len(s)] = 0
	return (*_Ctype_char)(p)
}

//go:linkname _cgo_runtime_gobytes runtime.gobytes
func _cgo_runtime_gobytes(unsafe.Pointer, int) []byte

func _Cfunc_GoBytes(p unsafe.Pointer, l _Ctype_int) []byte {
	return _cgo_runtime_gobytes(p, int(l))
}

//go:linkname _cgo_runtime_gostring runtime.gostring
func _cgo_runtime_gostring(*_Ctype_char) string

func _Cfunc_GoString(p *_Ctype_char) string {
	return _cgo_runtime_gostring(p)
}
//go:cgo_import_static _cgo_f1aa0e9ec108_Cfunc_free
//go:linkname __cgofn__cgo_f1aa0e9ec108_Cfunc_free _cgo_f1aa0e9ec108_Cfunc_free
var __cgofn__cgo_f1aa0e9ec108_Cfunc_free byte
var _cgo_f1aa0e9ec108_Cfunc_free = unsafe.Pointer(&__cgofn__cgo_f1aa0e9ec108_Cfunc_free)

//go:cgo_unsafe_args
func _Cfunc_free(p0 unsafe.Pointer) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_f1aa0e9ec108_Cfunc_free, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_f1aa0e9ec108_Cfunc_go_worker_CreateActor
//go:linkname __cgofn__cgo_f1aa0e9ec108_Cfunc_go_worker_CreateActor _cgo_f1aa0e9ec108_Cfunc_go_worker_CreateActor
var __cgofn__cgo_f1aa0e9ec108_Cfunc_go_worker_CreateActor byte
var _cgo_f1aa0e9ec108_Cfunc_go_worker_CreateActor = unsafe.Pointer(&__cgofn__cgo_f1aa0e9ec108_Cfunc_go_worker_CreateActor)

//go:cgo_unsafe_args
func _Cfunc_go_worker_CreateActor(p0 *_Ctype_char, p1 **_Ctype_char) (r1 _Ctype_int) {
	_cgo_runtime_cgocall(_cgo_f1aa0e9ec108_Cfunc_go_worker_CreateActor, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
	}
	return
}
//go:cgo_import_static _cgo_f1aa0e9ec108_Cfunc_go_worker_Initialize
//go:linkname __cgofn__cgo_f1aa0e9ec108_Cfunc_go_worker_Initialize _cgo_f1aa0e9ec108_Cfunc_go_worker_Initialize
var __cgofn__cgo_f1aa0e9ec108_Cfunc_go_worker_Initialize byte
var _cgo_f1aa0e9ec108_Cfunc_go_worker_Initialize = unsafe.Pointer(&__cgofn__cgo_f1aa0e9ec108_Cfunc_go_worker_Initialize)

//go:cgo_unsafe_args
func _Cfunc_go_worker_Initialize(p0 _Ctype_int, p1 *_Ctype_char, p2 *_Ctype_char, p3 *_Ctype_char, p4 *_Ctype_char, p5 _Ctype_int, p6 *_Ctype_char, p7 *_Ctype_char, p8 _Ctype_int, p9 *_Ctype_char, p10 _Ctype_int, p11 *_Ctype_char, p12 *_Ctype_char) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_f1aa0e9ec108_Cfunc_go_worker_Initialize, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
		_Cgo_use(p2)
		_Cgo_use(p3)
		_Cgo_use(p4)
		_Cgo_use(p5)
		_Cgo_use(p6)
		_Cgo_use(p7)
		_Cgo_use(p8)
		_Cgo_use(p9)
		_Cgo_use(p10)
		_Cgo_use(p11)
		_Cgo_use(p12)
	}
	return
}
//go:cgo_import_static _cgo_f1aa0e9ec108_Cfunc_go_worker_Run
//go:linkname __cgofn__cgo_f1aa0e9ec108_Cfunc_go_worker_Run _cgo_f1aa0e9ec108_Cfunc_go_worker_Run
var __cgofn__cgo_f1aa0e9ec108_Cfunc_go_worker_Run byte
var _cgo_f1aa0e9ec108_Cfunc_go_worker_Run = unsafe.Pointer(&__cgofn__cgo_f1aa0e9ec108_Cfunc_go_worker_Run)

//go:cgo_unsafe_args
func _Cfunc_go_worker_Run() (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_f1aa0e9ec108_Cfunc_go_worker_Run, uintptr(unsafe.Pointer(&r1)))
	if _Cgo_always_false {
	}
	return
}
//go:cgo_import_static _cgo_f1aa0e9ec108_Cfunc_go_worker_SubmitActorTask
//go:linkname __cgofn__cgo_f1aa0e9ec108_Cfunc_go_worker_SubmitActorTask _cgo_f1aa0e9ec108_Cfunc_go_worker_SubmitActorTask
var __cgofn__cgo_f1aa0e9ec108_Cfunc_go_worker_SubmitActorTask byte
var _cgo_f1aa0e9ec108_Cfunc_go_worker_SubmitActorTask = unsafe.Pointer(&__cgofn__cgo_f1aa0e9ec108_Cfunc_go_worker_SubmitActorTask)

//go:cgo_unsafe_args
func _Cfunc_go_worker_SubmitActorTask(p0 unsafe.Pointer, p1 *_Ctype_char, p2 _Ctype_int) (r1 _Ctype_struct___0) {
	_cgo_runtime_cgocall(_cgo_f1aa0e9ec108_Cfunc_go_worker_SubmitActorTask, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
		_Cgo_use(p2)
	}
	return
}
//go:cgo_export_dynamic SayHello
//go:linkname _cgoexp_f1aa0e9ec108_SayHello _cgoexp_f1aa0e9ec108_SayHello
//go:cgo_export_static _cgoexp_f1aa0e9ec108_SayHello
//go:nosplit
//go:norace
func _cgoexp_f1aa0e9ec108_SayHello(a unsafe.Pointer, n int32, ctxt uintptr) {
	fn := _cgoexpwrap_f1aa0e9ec108_SayHello
	_cgo_runtime_cgocallback(**(**unsafe.Pointer)(unsafe.Pointer(&fn)), a, uintptr(n), ctxt);
}

func _cgoexpwrap_f1aa0e9ec108_SayHello(p0 *_Ctype_char) {
	SayHello(p0)
}

//go:cgo_import_static _cgo_f1aa0e9ec108_Cfunc__Cmalloc
//go:linkname __cgofn__cgo_f1aa0e9ec108_Cfunc__Cmalloc _cgo_f1aa0e9ec108_Cfunc__Cmalloc
var __cgofn__cgo_f1aa0e9ec108_Cfunc__Cmalloc byte
var _cgo_f1aa0e9ec108_Cfunc__Cmalloc = unsafe.Pointer(&__cgofn__cgo_f1aa0e9ec108_Cfunc__Cmalloc)

//go:linkname runtime_throw runtime.throw
func runtime_throw(string)

//go:cgo_unsafe_args
func _cgo_cmalloc(p0 uint64) (r1 unsafe.Pointer) {
	_cgo_runtime_cgocall(_cgo_f1aa0e9ec108_Cfunc__Cmalloc, uintptr(unsafe.Pointer(&p0)))
	if r1 == nil {
		runtime_throw("runtime: C malloc failed")
	}
	return
}
