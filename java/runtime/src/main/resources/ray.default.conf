// This file contains default values of all Ray configurations.
// Users should define their own 'ray.conf' file in the classpath,
// or use Java properties, to overwrite these values.

ray {
  // ----------------------
  // Basic configurations
  // ----------------------

  // Address of the Ray cluster to connect to.
  // If not provided, a new Ray cluster will be created.
  address: ""

  // Run mode, available options are:
  //
  // `SINGLE_PROCESS`: Ray is running in one single Java process, without Raylet backend,
  //                   object store, and GCS. It's useful for debug.
  // `CLUSTER`: Ray is running on one or more nodes, with multiple processes.
  run-mode: CLUSTER

  // Configuration items about job.
  job {
    // If worker.mode is DRIVER, specify the job id.
    // If not provided, a random id will be used.
    id: ""
    // A list of directories or jar files separated by colon that specify the
    // search path for user code. This will be used as `CLASSPATH` in Java,
    // and `PYTHONPATH` in Python.
    code-search-path: ""
    /// The number of java worker per worker process.
    num-java-workers-per-process: 1

    /// The default memory of java worker process in mb.
    java-worker-process-default-memory-mb: 250
    /// The initial java worker process of the job.
    num-initial-java-worker-processes: 0
    /// The total memory that the job can use in mb.
    total-memory-mb: 4000
    /// The max total memory that the job can use in mb.
    max-total-memory-mb: 0

    /// The fraction of each java worker's heap size over its total memory
    java-heap-fraction: 0.8
    /// The jvm options for java workers of the job.
    jvm-options: []
    // Environment variables to be set on worker processes.
    worker-env {
      // key1 : "value1"
      // key2 : "value2"
    }
    /// The namespace of this job. It's used for isolation between jobs.
    /// Jobs in different namespaces cannot access each other.
    /// If it's not specified, a randomized value will be used instead.
    namespace: ""

    // Whether to clean up actors, objects and tasks associated with this job during
    // the shutdown process of the driver.
    long-running: false
    // Whether to enable L1 fault tolerance.
    enable-l1-fault-tolerance: false
    // Level of logging for user's code.
    logging-level: "INFO"

    actor-task-back-pressure-enabled: false

    max-pending-calls: 1024

    // The serialized runtime env.
    serialized-runtime-env: "{}"

    // The default lifetime of actors in this job.
    // If an actor is not specified lifetime at runtime, this
    // default value will be filled in it.
    // ANT-INTERNAL: The value is DETACHED by default in Ant internal, which
    // is the same as before.
    // We should align this to community in Ray2.0
    default-actor-lifetime: DETACHED

    // ANT-INTERNAL: For geaflow only.
    mark_job_state_as_failed_when_killing: false
  }

  // Configurations about logging.
  logging {
    // Level of logging for Java workers.
    level: INFO
    // Pattern of log messages.
    pattern: "%d{yyyy-MM-dd HH:mm:ss,SSS} %p %c{1} [%t]: %m%n"
    // Root directory of the log files.
    // If this is not set, the default one will be `${temp-dir}/session_xxx/logs`.
    dir: ""
    // Maximum size that a log file is allowed to reach before being rolled over to backup files.
    max-file-size: 128MB
    // Maximum number of backup files to keep around.
    max-backup-files: 1

    // Configuration for the customized loggers.
    // For example, if you want to customize the file name and the log pattern for a logger
    // named "userlogger", you can add the following configuration, and then you will get
    // the custom log file `userlogger.log`.
    loggers: [
//    {
//         name: "userlogger"
//         file-name: "userlogger"
//         pattern: "%d{yyyy-MM-dd HH:mm:ss,SSS} %p %c{1} [%t]: %m%n"
//     }
    ]
  }

  // If true, when an exception is thrown during a task, the exception will be set as the
  // task return. Then when calling `get` on the return object, a `RayTaskException` will be thrown.
  // If false, the worker will fail.
  task.return_task_exception = true

  // ----------------------
  // Redis configurations
  // ----------------------
  redis {
    // The password used to connect to the redis server.
    password: "5241590000000000"
  }

  // Below args will be appended as parameters of the `ray start` command.
  // It takes effect only if Ray head is started by a driver.
  head-args: []
}
