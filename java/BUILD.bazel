load("//java/tools/checkstyle:checkstyle.bzl", "checkstyle_test")
load("//bazel:ray.bzl", "flatbuffer_java_library")

java_binary(
    name = "bazel_deps",
    main_class = "com.github.johnynek.bazel_deps.ParseProject",
    runtime_deps = ["@bazel_deps//jar"],
)

java_import(
    name = "org_ray_ray_java_root",
    jars = [
        "liborg_ray_ray_api.jar",
        "liborg_ray_ray_api-src.jar",
        "liborg_ray_ray_runtime.jar",
        "liborg_ray_ray_runtime-src.jar",
        "liborg_ray_ray_runtime_test.jar",
        "liborg_ray_ray_runtime_test-src.jar",
        "liborg_ray_ray_test.jar",
        "liborg_ray_ray_test-src.jar",
        "org_ray_ray_tutorial_deploy.jar",
        "org_ray_ray_tutorial_deploy-src.jar",
        "all_tests_deploy.jar",
        "all_tests_deploy-src.jar",
    ],
    deps = [
        ":org_ray_ray_api",
        ":org_ray_ray_runtime",
        ":org_ray_ray_tutorial",
        ":org_ray_ray_test",
        ":org_ray_ray_runtime_test",
    ],
)

java_library(
    name = "org_ray_ray_api",
    srcs = glob(["api/src/main/java/**/*.java"]),
    deps = [
        "@org_slf4j_slf4j_log4j12//jar",
        "@log4j_log4j//jar",
        "@javax_xml_bind_jaxb_api//jar",
        "@com_sun_xml_bind_jaxb_core//jar",
        "@com_sun_xml_bind_jaxb_impl//jar",
    ],
)

checkstyle_test(
    name = "org_ray_ray_api-checkstyle",
    target = ":org_ray_ray_api",
    size = "small",
)

java_library(
    name = "org_ray_ray_runtime",
    srcs = glob([
        "runtime/src/main/java/**/*.java"
    ]) + [
        ":generate_java_gcs_fbs",
    ],
    resources = glob(["runtime/src/main/resources/**"]),
    data = ["//:raylet_library_java"],
    deps = [
        ":org_ray_ray_api",
        "@plasma//:org_apache_arrow_arrow_plasma",
        "@org_slf4j_slf4j_api//jar",
        "@com_fasterxml_jackson_core_jackson_core//jar",
        "@org_apache_commons_commons_pool2//jar",
        "@org_javassist_javassist//jar",
        "@org_objenesis_objenesis//jar",
        "@com_typesafe_config//jar",
        "@org_apache_commons_commons_lang3//jar",
        "@de_ruedigermoeller_fst//jar",
        "@com_github_davidmoten_flatbuffers_java//jar",
        "@redis_clients_jedis//jar",
        "@commons_io_commons_io//jar",
        "@com_google_guava_guava//jar",
        "@net_lingala_zip4j_zip4j//jar",
        "@org_slf4j_slf4j_log4j12//jar",
        "@org_ini4j_ini4j//jar",
        "@org_ow2_asm_asm//jar",
    ],
)

checkstyle_test(
    name = "org_ray_ray_runtime-checkstyle",
    target = ":org_ray_ray_runtime",
    size = "small",
)

java_binary(
    name = "org_ray_ray_tutorial",
    srcs = glob(["tutorial/src/main/java/**/*.java"]),
    resources = glob(["tutorial/src/main/resources/**"]),
    deps = [
        ":org_ray_ray_api",
        ":org_ray_ray_runtime",
        "@com_google_guava_guava//jar",
    ],
)

checkstyle_test(
    name = "org_ray_ray_tutorial-checkstyle",
    target = ":org_ray_ray_tutorial",
    size = "small",
)

java_library(
    name = "org_ray_ray_test",
    srcs = glob(["test/src/main/java/**/*.java"]),
    deps = [
        ":org_ray_ray_api",
        ":org_ray_ray_runtime",
        "@org_apache_commons_commons_lang3//jar",
        "@org_slf4j_slf4j_api//jar",
        "@plasma//:org_apache_arrow_arrow_plasma",
        "@org_testng_testng//jar",
        "@commons_collections_commons_collections//jar",
        "@com_google_guava_guava//jar",
    ],
)

checkstyle_test(
    name = "org_ray_ray_test-checkstyle",
    target = ":org_ray_ray_test",
    size = "small",
)

java_library(
    name = "org_ray_ray_runtime_test",
    srcs = glob(["runtime/src/test/java/**/*.java"]),
    deps = [
        ":org_ray_ray_api",
        ":org_ray_ray_runtime",
        "@org_apache_commons_commons_lang3//jar",
        "@com_beust_jcommander//jar",
        "@org_testng_testng//jar",
    ],
)

checkstyle_test(
    name = "org_ray_ray_runtime_test-checkstyle",
    target = ":org_ray_ray_runtime_test",
    size = "small",
)

exports_files(["testng.xml"])

java_binary(
    name = "all_tests",
    main_class = "org.testng.TestNG",
    data = ["testng.xml"],
    runtime_deps = [
        ":org_ray_ray_test",
        ":org_ray_ray_runtime_test",
    ],
)

flatbuffers_generate_files = [
    "ActorCheckpointData.java",
    "ActorCheckpointIdData.java",
    "ActorState.java",
    "ActorTableData.java",
    "Arg.java",
    "ClassTableData.java",
    "ClientTableData.java",
    "ConfigTableData.java",
    "CustomSerializerData.java",
    "DriverTableData.java",
    "ErrorTableData.java",
    "ErrorType.java",
    "FunctionTableData.java",
    "GcsTableEntry.java",
    "HeartbeatBatchTableData.java",
    "HeartbeatTableData.java",
    "Language.java",
    "ObjectTableData.java",
    "ProfileEvent.java",
    "ProfileTableData.java",
    "RayResource.java",
    "ResourcePair.java",
    "SchedulingState.java",
    "TablePrefix.java",
    "TablePubsub.java",
    "TaskInfo.java",
    "TaskLeaseData.java",
    "TaskReconstructionData.java",
    "TaskTableData.java",
    "TaskTableTestAndUpdate.java",
]

flatbuffer_java_library(
    name = "java_gcs_fbs",
    srcs = ["//:gcs_fbs_file"],
    outs = flatbuffers_generate_files,
    out_prefix = "",
)

genrule(
    name = "generate_java_gcs_fbs",
    srcs = [":java_gcs_fbs"],
    outs = [
        "runtime/src/main/java/org/ray/runtime/generated/" + file for file in flatbuffers_generate_files
    ],
    cmd = """
        for f in $(locations //java:java_gcs_fbs); do
            chmod +w $$f
            cp -f $$f $(@D)/runtime/src/main/java/org/ray/runtime/generated
        done
        python $$(pwd)/java/modify_generated_java_flatbuffers_files.py $(@D)/..
    """,
    local = 1,
)
