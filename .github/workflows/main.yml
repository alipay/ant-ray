name: CI

env:
  DEBIAN_FRONTEND: noninteractive

on: [pull_request]

jobs:
  iwyu:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        name: [
          ubuntu-clang-iwyu,
        ]
        include:
          - name: ubuntu-clang-iwyu
            os: ubuntu-latest
            compiler: clang
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Setup Bazel
      shell: bash
      env:
        BAZEL_CACHE_CREDENTIAL_B64: ${{ secrets.BAZEL_CACHE_CREDENTIAL_B64 }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: ./ci/travis/install-bazel.sh
    - name: Setup Clang Include-What-You-Use
      shell: bash
      run: |
        sudo apt-get install iwyu
    - name: Perform build
      continue-on-error: true
      shell: bash
      env:
        CC: ${{ matrix.compiler }}
      run: |
        # TODO(mehrdadn): Replace this with the same build script as below, once we factor that out
        . ./ci/travis/build-helper.sh prep_build_env
        bazel --batch build \
          --compilation_mode=fastbuild \
          --config=iwyu \
          --keep_going \
          "//:*"
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Github Actions requires a single row to be added to the build matrix.
        # See https://help.github.com/en/articles/workflow-syntax-for-github-actions.
        name: [
          windows-clang-cl,
        ]
        include:
          - name: windows-clang-cl
            os: windows-latest
            compiler: clang-cl
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Setup Bazel
      shell: bash
      env:
        BAZEL_CACHE_CREDENTIAL_B64: ${{ secrets.BAZEL_CACHE_CREDENTIAL_B64 }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: ./ci/travis/install-bazel.sh
    - name: Install C/C++ toolchains
      if: matrix.compiler == 'clang' || matrix.compiler == 'clang-cl'
      shell: bash
      env:
        CC: ${{ matrix.compiler }}
      run: ./ci/travis/install-toolchains.sh "${CC%%-*}"
    - name: Install MSYS2 (only needed if some shell commands are missing)
      if: false && runner.os == 'Windows'
      uses: numworks/setup-msys2@v1
      with:
        update: false
    - name: Perform build
      shell: bash
      run: |
        . ./ci/travis/build-helper.sh prep_build_env
        bazel --batch build \
          --keep_going \
          "//:ray_pkg"  # TODO(mehrdadn): Should be "//:*", but we get a linking error with _streaming.so

  build_jar_on_os_mac_osx:
    runs-on: macOS-10.14
#    on:
#      # Should be changed to on_pull before checkin.
#      pull_request:
#        branches:
#          - master
    env:
      PYTHON: 3.6
      RAY_BUILD_JAVA: "YES"
      OSS_ACCESS_KEY: ${{ secrets.OSS_ACCESS_KEY }}
      OSS_ACCESS_KEY_SECRET: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
    steps:
      - name: use checkout@v2 action
        uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Set up Python 3.6
        uses: actions/setup-python@v1
        with:
          python-version: 3.6
      - name: Upload native files
        run: bash ./java/build_jars/build_and_upload_native_dependencies_with_platform.sh


  build_jar_on_os_linux:
    runs-on: ubuntu-latest
    #    on:
    #      # Should be changed to on_pull before checkin.
    #      pull_request:
    #        branches:
    #          - master
    env:
      PYTHON: 3.6
      RAY_BUILD_JAVA: "YES"
      OSS_ACCESS_KEY: ${{ secrets.OSS_ACCESS_KEY }}
      OSS_ACCESS_KEY_SECRET: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
    steps:
      - name: use checkout@v2 action
        uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Set up Python 3.6
        uses: actions/setup-python@v1
        with:
          python-version: 3.6
      - name: Upload native files
        run: bash ./java/build_jars/build_and_upload_native_dependencies_with_platform.sh

  build_all_in_one_jar:
    runs-on: macOS-10.14
    #    on:
    #      # Should be changed to on_pull before checkin.
    #      pull_request:
    #        branches:
    #          - master
    needs: [build_jar_on_os_mac_osx, build_jar_on_os_linux]
    env:
      PYTHON: 3.6
      RAY_BUILD_JAVA: "YES"
      OSS_ACCESS_KEY: ${{ secrets.OSS_ACCESS_KEY }}
      OSS_ACCESS_KEY_SECRET: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
    steps:
      - name: use checkout@v2 action
        uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Set up Python 3.6
        uses: actions/setup-python@v1
        with:
          python-version: 3.6
      - name: Build and upload jars.
        run: bash ./java/build_jars/build_all_platform_dependencies_into_jar.sh
#
#  test_all_in_one_jar_on_os_mac_osx:
#    runs-on: macOS-10.14
#    on:
#      # Should be changed to on_pull before checkin.
#      pull_request:
#        branches:
#          - master
#    needs: build_all_in_one_jar
#    steps:
#
#  test_all_in_one_jar_on_os_linux:
#    runs-on: ubuntu-16.04
#    on:
#      # Should be changed to on_pull before checkin.
#      pull_request:
#        branches:
#          - master
#    needs: build_all_in_one_jar
#    steps:
